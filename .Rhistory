"incomeFeelings" = incomeFeelings,
"income5" = income5,
"urbanicity" = urbanicity,
"householdSize" = householdSize,
"childrenInHousehold" = childrenInHousehold),
.data$focus) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$focus)) %>%
rename(aggregation = "switch(...)", response = "focus") %>%
relocate(question, .before = response) %>%
ungroup()
survey_question = "q22B"
wrp_agg <- df %>%
rename(focus = survey_question) %>%
group_by(.data$year,
switch(aggregation,
"country" = WP5,
"iso3C" = iso3C,
"year" = year,
"globalRegion" = globalRegion,
"region" = region,
"government" = government,
"countryIncomeLevel" = countryIncomeLevel,
"age" = age,
"gender" = gender,
"education" = education,
"incomeFeelings" = incomeFeelings,
"income5" = income5,
"urbanicity" = urbanicity,
"householdSize" = householdSize,
"childrenInHousehold" = childrenInHousehold),
.data$focus) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$focus)) %>%
rename(aggregation = "switch(...)", response = "focus") %>%
relocate(question, .before = response) %>%
ungroup()
wrp_agg <- df %>%
rename(focus = survey_question) %>%
group_by(.data$year,
switch(aggregation,
"country" = wp5,
"iso3C" = iso3C,
"year" = year,
"globalRegion" = globalRegion,
"region" = region,
"government" = government,
"countryIncomeLevel" = countryIncomeLevel,
"age" = age,
"gender" = gender,
"education" = education,
"incomeFeelings" = incomeFeelings,
"income5" = income5,
"urbanicity" = urbanicity,
"householdSize" = householdSize,
"childrenInHousehold" = childrenInHousehold),
.data$focus) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$focus)) %>%
rename(aggregation = "switch(...)", response = "focus") %>%
relocate(question, .before = response) %>%
ungroup()
View(wrp_agg)
labelled::var_label(wrp_agg$question) <- "Survey question"
labelled::var_label(wrp_agg$response) <- "Survey response"
labelled::var_label(wrp_agg$weightedCount) <- "Representative count of respondents"
View(wrp_agg)
wrp_agg <- df %>%
rename(focus = survey_question) %>%
group_by(.data$year,
switch(aggregation,
"country" = wp5,
"iso3C" = iso3C,
"year" = year,
"globalRegion" = globalRegion,
"region" = region,
"government" = government,
"countryIncomeLevel" = countryIncomeLevel,
"age" = age,
"gender" = gender,
"education" = education,
"incomeFeelings" = incomeFeelings,
"income5" = income5,
"urbanicity" = urbanicity,
"householdSize" = householdSize,
"childrenInHousehold" = childrenInHousehold),
.data$focus) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$focus)) %>%
rename(aggregation = "switch(...)", response = "focus") %>%
relocate(question, .before = response) %>%
ungroup() %>%
group_by(aggregation, year) %>%
mutate(pct = weightedCount / sum(weightedCount) * 100) %>%
ungroup()
View(wrp_agg)
?create_dictionary
View(dict)
score = sample(-1:1,20,replace = TRUE)
var_lab(score)
var_lab(score) = "Evaluation of tested brand"
val_lab(score) = c("Dislike it" = -1,
"So-so" = 0,
"Like it" = 1
)
?apply_dictionary
y = apply_dictionary(df, dict)
View(y)
View(df)
apply_dictionary
f = "C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav"
raw = rio::import(f)
dict = create_dictionary(raw)
y = apply_dictionary(raw, dict)
View(y)
x = raw
is.data.frame(x)
is.data.frame(dict)
stopifnot(is.data.frame(x), is.data.frame(dict), all(c("variable",
"value", "label", "meta") %in% colnames(dict)))
if (nrow(dict) == 0)
dict[["variable"]][dict[["variable"]] %in% ""] = NA
dict[["meta"]][dict[["meta"]] %in% ""] = NA
for (i in seq_len(nrow(dict))[-1]) {
if (is.na(dict[["variable"]][i])) {
dict[["variable"]][i] = dict[["variable"]][i - 1]
}
}
colnames(x)
dict = dict[dict$variable %in% colnames(x), ]
all_varlabs = dict[dict$meta %in% "varlab", ]
for (i in seq_len(nrow(all_varlabs))) {
var_lab(x[[all_varlabs$variable[i]]]) = all_varlabs$label[i]
}
View(x)
vallabs = dict[dict$meta %in% NA, ]
references = dict[dict$meta %in% "reference", ]
vallabs = lapply(split(vallabs, vallabs$variable), function(each_dict) setNames(type.convert(each_dict$value,
as.is = TRUE), if_na(each_dict$label, "")))
missing_references = setdiff(unique(references$label), names(vallabs))
if (length(missing_references) > 0) {
warning(paste0(" missing references - ", paste(paste0("'",
missing_references, "'"), collapse = ", ")))
references = references[references$label %in% names(vallabs),
]
}
for (i in seq_len(nrow(references))) {
add_val_lab(x[[references$variable[i]]]) = vallabs[[references$label[i]]]
}
for (i in seq_along(vallabs)) {
add_val_lab(x[[names(vallabs)[i]]]) = vallabs[[i]]
}
View(x)
View(dict)
# get raw data -----------------------------------------------------------------
raw <- rio::import("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
dict <- create_dictionary(raw)
View(dict)
references = dict %>% filter(meta = "reference")
references = dict %>% filter(meta == "reference")
View(references)
View(dict)
ref_responses = dict %>% filter(variable %in% references$label)
View(ref_responses)
ref_responses = dict %>% filter(variable %in% references$label, is.na(meta))
references = reference %>% rename(orig_q = variable, variable = label)
references = references %>% rename(orig_q = variable, variable = label)
library(tidyverse)
library(here)
library(labelled)
# get raw data -----------------------------------------------------------------
raw <- rio::import("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
dict <- create_dictionary(raw)
references = dict %>% filter(meta == "reference")
ref_responses = dict %>% filter(variable %in% references$label, is.na(meta))
references = references %>% rename(orig_q = variable, variable = label)
dict <- create_dictionary(raw)
library(expss)
dict <- create_dictionary(raw)
references = dict %>% filter(meta == "reference")
ref_responses = dict %>% filter(variable %in% references$label, is.na(meta))
references = references %>% rename(orig_q = variable, variable = label)
View(references)
View(ref_responses)
View(raw)
View(ref_responses)
View(references)
?recode
apply_labels
?apply_labels
raw = apply_labels(raw)
View(raw)
dict <- labelled::generate_dictionary(raw)
View(dict)
# get raw data -----------------------------------------------------------------
raw <- haven::read_sav("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
dict <- labelled::generate_dictionary(raw)
View(dict)
names(raw)
raw %>%
dplyr::select(Q16A)
raw %>%
dplyr::select(WP5, Q16A)
raw %>%
mutate_if(haven::is.labelled, haven::as_factor)
x = raw %>%
mutate_if(haven::is.labelled, haven::as_factor)
View(x)
x = raw  %>%
# --------------------------------------------------------------
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor) %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
install.packages('sjlabelled')
x = raw  %>%
# --------------------------------------------------------------
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor) %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
View(x)
View(dict)
dict <- labelled::generate_dictionary(raW)
# get raw data -----------------------------------------------------------------
raw <- haven::read_sav("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
raw$projectionWeight = ifelse(is.na(raw$projectionWeight), raw$PROJWT_2021, raw$projectionWeight)
raw$projectionWeight = raw$PROJWT_2019
raw$projectionWeight = ifelse(is.na(raw$projectionWeight), raw$PROJWT_2021, raw$projectionWeight)
dict <- labelled::generate_dictionary(raW)
dict <- labelled::generate_dictionary(raw)
View(dict)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country)
View(wrp)
raw$countryIncomeLevel = raw$CountryIncomeLevel2019
raw$countryIncomeLevel = ifelse(is.na(raw$countryIncomeLevel), raw$CountryIncomeLevel2021, raw$countryIncomeLevel)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
mutate_if(haven::is.labelled, haven::as_factor) %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
View(wrp)
names(wrp)
wrp$countryIncomeLevel = wrp$CountryIncomeLevel2019
wrp$countryIncomeLevel = wrp$`World Bank Country Income Classification corresponding to 2019 data`
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
wrp$`World Bank Country Income Classification corresponding to 2021 data`, wrp$countryIncomeLevel)
wrp$countryIncomeLevel
wrp$`World Bank Country Income Classification corresponding to 2019 data`
raw <- haven::read_sav("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
raw$projectionWeight = raw$PROJWT_2019
raw$projectionWeight = ifelse(is.na(raw$projectionWeight), raw$PROJWT_2021, raw$projectionWeight)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor) %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
wrp$`World Bank Country Income Classification corresponding to 2019 data`
wrp$`World Bank Country Income Classification corresponding to 2021 data`
wrp$countryIncomeLevel = factor(wrp$`World Bank Country Income Classification corresponding to 2019 data`)
wrp$countryIncomeLevel
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
factor(wrp$`World Bank Country Income Classification corresponding to 2021 data`), wrp$countryIncomeLevel)
wrp$countryIncomeLevel
names(wrp)
View(dict)
interaction?
?interaction
b <- gl(2, 2, 8, labels = c("ctrl", "treat"))
s <- gl(2, 1, 8, labels = c("M", "F"))
interaction(a, b)
a <- gl(2, 4, 8)
interaction(a, b)
wrp$countryIncomeLevel = as.character(wrp$`World Bank Country Income Classification corresponding to 2019 data`)
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$`World Bank Country Income Classification corresponding to 2021 data`), wrp$countryIncomeLevel)
wrp$countryIncomeLevel
dictionary = labelled::generate_dictionary(raw)
View(dictionary)
View(dictionary)
dictionary = labelled::generate_dictionary(wrp) %>%
mutate(disaggregator = pos %in% c(2:21, 233))
View(dictionary)
View(dictionary)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor) %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
wrp$countryIncomeLevel = as.character(wrp$`World Bank Country Income Classification corresponding to 2019 data`)
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$`World Bank Country Income Classification corresponding to 2021 data`), wrp$countryIncomeLevel)
wrp_dictionary = labelled::generate_dictionary(wrp) %>%
mutate(disaggregator = pos %in% c(2, 13:21, 234))
usethis::use_data(wrp, overwrite = TRUE)
View(wrp_dictionary)
raw <- haven::read_sav("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
raw$projectionWeight = raw$PROJWT_2019
raw$projectionWeight = ifelse(is.na(raw$projectionWeight), raw$PROJWT_2021, raw$projectionWeight)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_dictionary = labelled::generate_dictionary(wrp) %>%
mutate(disaggregator = pos %in% c(2, 13:21, 234))
View(wrp_dictionary)
wrp_dictionary = labelled::generate_dictionary(wrp) %>%
mutate(disaggregator = pos %in% c(2, 13:21, 234)) %>%
mutate(question = substr(variable, 1,1) == "q" | substr(variable, 1,2) == "vh")
View(wrp_dictionary)
raw <- haven::read_sav("C:/Users/DavidHammond/Downloads/lrf_wrp_2021_full_data/lrf_wrp_2021_full_data.sav")
raw$projectionWeight = raw$PROJWT_2019
raw$projectionWeight = ifelse(is.na(raw$projectionWeight), raw$PROJWT_2021, raw$projectionWeight)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor) %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
wrp$countryIncomeLevel = as.character(wrp$`World Bank Country Income Classification corresponding to 2019 data`)
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$`World Bank Country Income Classification corresponding to 2021 data`), wrp$countryIncomeLevel)
wrp_dictionary = labelled::generate_dictionary(wrp) %>%
mutate(disaggregator = pos %in% c(2, 13:21, 234)) %>%
mutate(question = substr(variable, 1,1) == "q" | substr(variable, 1,2) == "vh")
source("~/github/wrp/data-raw/wrp_collection.R")
wrp$countryIncomeLevel = as.character(wrp$`World Bank Country Income Classification corresponding to 2019 data`)
wrp$`World Bank Country Income Classification corresponding to 2019 data`
wrp$countryIncomeLevel = as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel)
wrp_dictionary = labelled::generate_dictionary(wrp) %>%
mutate(disaggregator = pos %in% c(2, 13:21, 234)) %>%
mutate(question = substr(variable, 1,1) == "q" | substr(variable, 1,2) == "vh")
wrp = wrp %>%
# change 2: convert variable labels to variable names ----
sjlabelled::label_to_colnames()
source("~/github/wrp/data-raw/wrp_collection.R")
?utils::menu
menu(c("List letters", "List LETTERS"))
dict = wrp::wrp_dictionary
dict = wrp_dictionary
question = dict %>% filter(question)
View(question)
q = menu(question$label)
disaggregation = dict %>% filter(disaggregator)
dis = menu(disaggregation$label)
match(question$variable[q], dict$variable)
question$variable[q]
dis = menu(disaggregation$label)
dis = match(question$variable[dis], dict$variable)
View(dict)
dis = menu(disaggregation$label)
dis = match(disaggregation$variable[dis], dict$variable)
yr = match("year", dict$variable)
dis
wgt = ifelse(dis = 2, match("wgt", dict$variable), match("projectionWeight", dict$variable))
wgt = ifelse(dis == 2, match("wgt", dict$variable), match("projectionWeight", dict$variable))
df <- wrp
dict = wrp_dictionary
message("Please Select Survey Question")
question = dict %>% filter(question)
q = menu(question$label)
q = match(question$variable[q], dict$variable)
disaggregation = dict %>% filter(disaggregator)
dis = menu(disaggregation$label)
dis = match(disaggregation$variable[dis], dict$variable)
yr = match("year", dict$variable)
wgt = ifelse(dis == 2, match("wgt", dict$variable), match("projectionWeight", dict$variable))
df = df[, c(dis, yr, wgh, q)]
df = df[, c(dis, yr, wgt, q)]
View(df)
df = df[, c(dis, yr, wgt, q)] %>% filter(complete.cases(.))
df <- wrp
View(df)
df = df[, c(dis, yr, wgt, q)] %>% filter(complete.cases(.))
View(df)
names(df) = c(dis, year, wgt, q)
names(df) = c("dis", "year", "wgt", "q")
wrp_agg <- df %>%
group_by(dis, year) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(disaggregation = labelled::var_label(.data$dis),
question = labelled::var_label(.data$q)) %>%
relocate(disaggregation, question) %>%
ungroup()
wrp_agg <- df %>%
group_by(dis, year) %>%
summarise(weightedCount = sum(.data$wgt))
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt))
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(disaggregation = labelled::var_label(.data$dis),
question = labelled::var_label(.data$q)) %>%
relocate(disaggregation, question) %>%
ungroup()
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(disaggregation = labelled::var_label(.data$dis),
question = labelled::var_label(.data$q)) %>%
relocate(disaggregation, question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(pct = weightedCount / sum(weightedCount) * 100)
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(disaggregation = labelled::var_label(.data$dis),
question = labelled::var_label(.data$q)) %>%
relocate(disaggregation, question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(pct = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q) %>%
select(disaggregation, year, question, response, pct)
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$q)) %>%
relocate(disaggregation, question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(pct = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q, disaggregation = dis) %>%
select(disaggregation, year, question, response, pct)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$q)) %>%
relocate(question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(pct = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q, disaggregation = dis) %>%
select(disaggregation, year, question, response, pct)
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$q)) %>%
relocate(question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(percentage = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q, disaggregation = dis) %>%
select(disaggregation, year, question, response, pct) %>%
sjlabelled::label_to_colnames()
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
mutate(question = labelled::var_label(.data$q)) %>%
relocate(question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(percentage = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q, disaggregation = dis) %>%
select(disaggregation, year, question, response, percentage) %>%
sjlabelled::label_to_colnames()
View(wrp_agg)
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
#mutate(question = labelled::var_label(.data$q)) %>%
relocate(question) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(percentage = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q, disaggregation = dis) %>%
select(disaggregation, year, response, percentage) %>%
sjlabelled::label_to_colnames()
wrp_agg <- df %>%
group_by(dis, year, q) %>%
summarise(weightedCount = sum(.data$wgt)) %>%
#mutate(question = labelled::var_label(.data$q)) %>%
ungroup() %>%
group_by(dis, year) %>%
mutate(percentage = weightedCount / sum(weightedCount) * 100) %>%
ungroup() %>%
rename(response = q, disaggregation = dis) %>%
select(disaggregation, year, response, percentage) %>%
sjlabelled::label_to_colnames()
View(wrp_agg)
