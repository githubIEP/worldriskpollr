wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel <- as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel <- ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 7, 234)) %>%
mutate(disaggregator = pos %in% c(2, 14:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary = wrp_dictionary[wrp_dictionary$regional_disaggregate | wrp_dictionary$disaggregator | wrp_dictionary$question,]
wrp_dictionary$WRP_UID = NA
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] = paste0("REG", 1:sum(wrp_dictionary$regional_disaggregate))
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] = paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] = paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary = wrp_dictionary %>% select(WRP_UID, pos, variable, label, levels)
regions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "REG",]
disaggregations = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "DIS",]
questions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,1) == "Q",]
View(disaggregations)
View(wrp)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel <- as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel <- ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 7, 234)) %>%
mutate(disaggregator = pos %in% c(3, 14:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary = wrp_dictionary[wrp_dictionary$regional_disaggregate | wrp_dictionary$disaggregator | wrp_dictionary$question,]
wrp_dictionary$WRP_UID = NA
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] = paste0("REG", 1:sum(wrp_dictionary$regional_disaggregate))
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] = paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] = paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary = wrp_dictionary %>% select(WRP_UID, pos, variable, label, levels)
regions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "REG",]
disaggregations = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "DIS",]
questions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,1) == "Q",]
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel <- as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel <- ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 7, 234)) %>%
mutate(disaggregator = pos %in% c(3, 14:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary = wrp_dictionary[wrp_dictionary$regional_disaggregate | wrp_dictionary$disaggregator | wrp_dictionary$question,]
wrp_dictionary$WRP_UID = NA
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] = paste0("REG", 1:sum(wrp_dictionary$regional_disaggregate))
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] = paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] = paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary = wrp_dictionary %>% select(WRP_UID, pos, variable, label, levels)
regions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "REG",]
disaggregations = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "DIS",]
questions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,1) == "Q",]
View(disaggregations)
View(questions)
questions$WRP_UID = questions$variable
View(questions)
View(regions)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 7, 232)) %>%
mutate(disaggregator = pos %in% c(3, 14:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary = wrp_dictionary[wrp_dictionary$regional_disaggregate | wrp_dictionary$disaggregator | wrp_dictionary$question,]
wrp_dictionary$WRP_UID = NA
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] = paste0("REG", 1:sum(wrp_dictionary$regional_disaggregate))
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] = paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] = paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary = wrp_dictionary %>% select(WRP_UID, pos, variable, label, levels)
regions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "REG",]
disaggregations = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "DIS",]
questions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,1) == "Q",]
questions$WRP_UID = questions$variable
View(regions)
View(wrp)
View(wrp_dictionary)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel <- as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel <- ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel
)
View(wrp_dictionary)
View(raw)
View(raw)
wrp <- raw %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel <- as.character(wrp$countryIncomeLevel2019)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel <- as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel <- ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 232)) %>%
mutate(disaggregator = pos %in% c(3, 14:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
View(wrp_dictionary)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 12:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary = wrp_dictionary[wrp_dictionary$regional_disaggregate | wrp_dictionary$disaggregator | wrp_dictionary$question,]
wrp_dictionary$WRP_UID = NA
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] = paste0("REG", 1:sum(wrp_dictionary$regional_disaggregate))
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] = paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] = paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary = wrp_dictionary %>% select(WRP_UID, pos, variable, label, levels)
regions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "REG",]
disaggregations = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "DIS",]
questions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,1) == "Q",]
questions$WRP_UID = questions$variable
View(disaggregations)
View(questions)
questions$WRP_UID = toupper(questions$variable)
View(questions)
View(wrp)
# wrp = wrp %>%
# # change 2: convert variable labels to variable names ----
#   sjlabelled::label_to_colnames()
wrp_data <- wrp
usethis::use_data(wrp_data, regions, disaggregations, questions, overwrite = TRUE, internal = T, compress = "xz")
View(questions)
geography = "country"
question_uid = "Q1"
question_uid = match(questions_uid, questions$WRP_UID)
questions_uid = questions$pos[questions_uid]
question_uid = match(question_uid, questions$WRP_UID)
questions$pos[questions_uid]
question_uid = questions$pos[question_uid]
yr <- match("year", dict$variable)
#error check that geograpy and questions are in dataset
geography <- case_when(
geography == "country" ~ regions$pos[1],
geography == "region" ~ regions$pos[2],
geography == "income" ~ regions$pos[3])
yr <- match("year", dict$variable)
wgt <- ifelse(geography == 2, match("wgt", dict$variable), match("projectionWeight", dict$variable))
df <- wrp_data
dict <- wrp_dictionary
disaggregation <- dict %>% filter(.data$disaggregator)
wrp_agg <- df[, c(geography, yr, wgt, question_uid)]
yr <- match("year", dict$variable)
dict$variable
View(wrp_dictionary)
View(raw)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 12:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
View(wrp_dictionary)
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary = wrp_dictionary[wrp_dictionary$regional_disaggregate | wrp_dictionary$disaggregator | wrp_dictionary$question,]
wrp_dictionary$WRP_UID = NA
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] = paste0("REG", 1:sum(wrp_dictionary$regional_disaggregate))
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] = paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] = paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary = wrp_dictionary %>% select(WRP_UID, pos, variable, label, levels)
regions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "REG",]
disaggregations = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,3) == "DIS",]
questions = wrp_dictionary[substr(wrp_dictionary$WRP_UID,1,1) == "Q",]
questions$WRP_UID = toupper(questions$variable)
View(wrp_dictionary)
wrp_dictionary <- labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 12:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" | substr(variable, 1, 2) == "vh")
year_column = match("year", wrp_dictionary$variable)
source("~/github/wrp/data-raw/format_wrp_from_raw.R")
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr")
pkgfilecache::get_cache_dir()
pkgfilecache::get_cache_dir(pkg_info)
source("~/github/wrp/R/download_data.R")
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
local_filenames = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = pkgfilecache::ensure_files_available(pkg_info, local_filenames, urls);
cfiles$file_status = NULL;
unzip(pkgfilecache::get_filepath(pkg_info, filename, mustWork=mustWork), exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=mustWork)))
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
local_filenames = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = pkgfilecache::ensure_files_available(pkg_info, local_filenames, urls);
cfiles$file_status = NULL;
unzip(pkgfilecache::get_filepath(pkg_info, filename, mustWork=mustWork), exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=mustWork)))
# Replace these with your optional data files.
filename = c("wrp.zip");    # How the files should be called in the local package file cache
unzip(pkgfilecache::get_filepath(pkg_info, filename, mustWork=mustWork), exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=mustWork)))
raw <- haven::read_sav(pkgfilecache::get_filepath(pkg_info, "lrf_wrp_2021_full_data.sav", mustWork=mustWork))
source("~/github/wrp/R/download_data.R")
process_wrp(pkg_info)
library(tidyverse)
process_wrp(pkg_info)
raw <- haven::read_sav(pkgfilecache::get_filepath(pkg_info, "lrf_wrp_2021_full_data.sav", mustWork=mustWork))
raw$projectionWeight <- raw$PROJWT_2019
raw$projectionWeight <- ifelse(is.na(raw$projectionWeight),
raw$PROJWT_2021, raw$projectionWeight)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 13:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "countryIncomeLevel"),
"World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "projectionWeight"),
"projectionWeight", wrp_dictionary$label)
wrp_dictionary <- wrp_dictionary[wrp_dictionary$regional_disaggregate |
wrp_dictionary$disaggregator |
wrp_dictionary$question |
wrp_dictionary$needed, ]
wrp_data = wrp_data[,c(wrp_dictionary$pos)]
wrp_dictionary$pos = match(wrp_dictionary$variable, names(wrp_data))
wrp_year_col <- match("year", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
wrp_projweight_col <- match("projectionWeight", wrp_dictionary$variable)
wrp_dictionary$WRP_UID <- NA
regional_ids <- c("country", "region", "income")
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] <- regional_ids
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] <-
paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] <-
paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary$WRP_UID[wrp_dictionary$needed] <-
paste0("NEED", 1:sum(wrp_dictionary$needed))
wrp_dictionary <- wrp_dictionary %>%
select(WRP_UID, pos, variable, label, levels)
wrp_regions <- wrp_dictionary[wrp_dictionary$WRP_UID %in% regional_ids, ]
wrp_disaggregations <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 3) ==
"DIS", ]
wrp_questions <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 1) == "Q", ]
wrp_questions$WRP_UID <- toupper(wrp_questions$variable)
wrp_needed = wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 4) == "NEED", ]
#wrp_data = remove_all_labels(wrp_data)
wrp_regions = wrp_regions %>% select(-levels)
wrp_disaggregations = wrp_disaggregations %>% select(-levels)
# wrp_region_1st_nom = wrp_data %>% select(c(1,4,5, 103)) %>% distinct()
# wrp_data = wrp_data %>% select(-c(5, 103))
objs = list(wrp_data,
wrp_year_col,
wrp_projweight_col,
wrp_weight_col,
wrp_regions,
wrp_disaggregations,
wrp_questions)
?usethis::use_data
names(objs)
?saveRDS
saveRDS(obj, file = file.path(pkgfilecache::get_cache_dir(pkg_info), "sysdata.rda"), compress = "xz")
saveRDS(objs, file = file.path(pkgfilecache::get_cache_dir(pkg_info), "sysdata.rda"), compress = "xz")
pkgfilecache::list_available(pkg_info)
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
files = files[files != 'sysdata.rda']
list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
files = files[!grepl('sysdata.rda', files)]
file.remove(files)
list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
pkgfilecache::erase_file_cache(pkg_info)
list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
source("~/github/wrp/R/download_data.R")
download_optional_data()
list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
filename = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = pkgfilecache::ensure_files_available(pkg_info, filename, urls);
cfiles$file_status = NULL;
unzip(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE),
exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE)))
library(tidyverse)
process_wrp(pkg_info)
source("~/github/wrp/R/download_data.R")
process_wrp(pkg_info)
files = files[!grepl('sysdata.rdata', files)]
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
files = files[!grepl('sysdata.rdata', files)]
file.remove(files)
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
load(files)
files
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
load(files)
?save
library(tidyverse)
source("~/github/wrp/R/download_data.R")
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
filename = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = pkgfilecache::ensure_files_available(pkg_info, filename, urls);
cfiles$file_status = NULL;
unzip(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE),
exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE)))
process_wrp(pkg_info)
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
files = files[!grepl('sysdata.rdata', files)]
file.remove(files)
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
filename = c("wrp.zip");    # How the files should be called in the local package file cache
source("~/github/wrp/R/download_data.R")
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = pkgfilecache::ensure_files_available(pkg_info, filename, urls);
cfiles$file_status = NULL;
unzip(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE),
exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE)))
process_wrp(pkg_info)
files = files[!grepl('sysdata.rdata', files)]
file.remove(files)
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
load(files)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
source("C:/Users/DavidHammond/Documents/github/wrp/R/wpr_sysdata.R")
library(pkgfilecache)
.wrp_sysdata_file_path()
source("~/github/wrp/R/wrp_cache.R")
.wrp_check()
load(.wrp_sysdata_file_path())
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(worldriskpollr)
x=wrp_search("violence")
roxygen2::roxygenise()
library(worldriskpollr)
# Set up data frame
pkg_info = get_pkg_info("worldriskpollr");
x=wrp_search("violence")
.wrp_sysdata_file_path()
.wrp_cache()
source("~/github/wrp/R/03-wrp_cache.R")
.wrp_cache()
library(tidyverse)
.wrp_cache()
.wrp_cache()
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
grepl(.wrp_sysdata_file_path(), files)
.wrp_sysdata_file_path()
files
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
files = files[!grepl(basename(.wrp_sysdata_file_path()), files)]
library(worldriskpollr)
x=wrp_search("violence")
library(worldriskpollr)
x=wrp_search("violence")
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
message("Downloading the World Risk Poll Data...")
filename = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = ensure_files_available(pkg_info, filename, urls);
library(pkgfilecache)
cfiles = ensure_files_available(pkg_info, filename, urls);
cfiles$file_status = NULL;
unzip(get_filepath(pkg_info, filename, mustWork=TRUE),
exdir = dirname(pkgfilecache::get_filepath(pkg_info, filename, mustWork=TRUE)))
Message( "Processing the World Risk Poll...")
message( "Processing the World Risk Poll...")
.wrp_processing(pkg_info)
files = list.files(pkgfilecache::get_cache_dir(pkg_info), full.names = T)
files = files[!grepl(basename(.wrp_sysdata_file_path()), files)]
file.remove(files)
source("~/github/wrp/R/03-wrp_cache.R")
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
message("Downloading the World Risk Poll Data...")
filename = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
ensure_files_available(pkg_info, filename, urls);
cfiles = ensure_files_available(pkg_info, filename, urls);
cfiles
cfiles$file_status = NULL;
unzip(get_filepath(pkg_info, filename),
exdir = get_cache_dir())
pkg_info = pkgfilecache::get_pkg_info("worldriskpollr");        # to identify the package using the cache
unzip(get_filepath(pkg_info, filename),
exdir = get_cache_dir())
pkg_info = get_pkg_info("worldriskpollr");        # to identify the package using the cache
unzip(get_filepath(pkg_info, filename),
exdir = get_cache_dir())
unzip(get_filepath(pkg_info, filename),
exdir = get_cache_dir(pkg_info))
message( "Processing the World Risk Poll...")
.wrp_processing(pkg_info)
files = list.files(get_cache_dir(pkg_info), full.names = T)
files = files[!grepl(basename(.wrp_sysdata_file_path()), files)]
file.remove(files)
cfiles = ensure_files_available(pkg_info, .wrp_sysdata_file_path())
library(worldriskpollr)
x = wrp_search("violence")
View(x)
x = wrp_search("violence")
pkg_info = get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
message("Downloading the World Risk Poll Data...")
filenames = c("wrp.zip", "sysdata.rdata");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = ensure_files_available(pkg_info, filenames, urls);
library(pkgfilecache)
cfiles = ensure_files_available(pkg_info, filenames, urls);
erase_file_cache(pkg_info)
pkg_info = get_pkg_info("worldriskpollr");        # to identify the package using the cache
erase_file_cache(pkg_info)
pkg_info = get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
message("Downloading the World Risk Poll Data...")
filenames = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = ensure_files_available(pkg_info, filenames, urls);
unzip(get_filepath(pkg_info, filename, mustWork = TRUE),
exdir = get_cache_dir(pkg_info))
filename = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = ensure_files_available(pkg_info, filenames, urls);
unzip(get_filepath(pkg_info, filename, mustWork = TRUE),
exdir = get_cache_dir(pkg_info))
message( "Processing the World Risk Poll...")
.wrp_processing(pkg_info)
files = list.files(get_cache_dir(pkg_info), full.names = T)
files = files[!grepl(basename(.wrp_sysdata_file_path()), files)]
pkgfilecache::list_available(pkg_info)
pkgfilecache::are_files_available()
pkgfilecache::are_files_available(pkg_info)
pkgfilecache::get_absolute_path_for_files(pkg_info)
pkgfilecache::get_absolute_path_for_files(get_pkg_info("worldriskpollr"))
?get_absolute_path_for_files
pkg_info = get_pkg_info("worldriskpollr");        # to identify the package using the cache
# Replace these with your optional data files.
message("Downloading the World Risk Poll Data...")
filename = c("wrp.zip");    # How the files should be called in the local package file cache
urls = c("https://wrp.lrfoundation.org.uk/lrf_wrp_2021_full_data.zip"); # Remote URLs where to download files from
cfiles = ensure_files_available(pkg_info, filenames, urls);
unzip(get_filepath(pkg_info, filename, mustWork = TRUE),
exdir = get_cache_dir(pkg_info))
message( "Processing the World Risk Poll...")
files = list.files(get_cache_dir(pkg_info))
files = files[!grepl(basename(.wrp_sysdata_file_path()), files)]
remove_cached_files(files)
?remove_cached_files
remove_cached_files(pkg_info, files)
library(worldriskpollr)
x = wrp_search("violence")
library(worldriskpollr)
x = wrp_search("violence")
roxygen2::roxygenise()
library(worldriskpollr)
x = wrp_search("violence")
library(worldriskpollr)
x = wrp_search("violence")
x = wrp_get(geography = "country", wrp_question_uid = "Q1")
load("C:/Users/DavidHammond/AppData/Local/worldriskpollr/worldriskpollr/sysdata.rdata")
?load
source("~/github/wrp/R/05-wrp_get.R")
x = wrp_get(geography = "country", wrp_question_uid = "Q1")
library(worldriskpollr)
x = wrp_get(geography = "country", wrp_question_uid = "Q1")
wrp_get
library(worldriskpollr)
x = wrp_search("violence")
library(worldriskpollr)
x = wrp_search("violence")
library(worldriskpollr)
x = wrp_search("violence")
View(x)
x = wrp_get(geography = "country", wrp_question_uid = "Q1")
x = wrp_get(geography = "country", wrp_question_uid = "Q2_1")
library(worldriskpollr)
x = wrp_get(geography = "country", wrp_question_uid = "Q2_1")
library(worldriskpollr)
