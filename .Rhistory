substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label),
"World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary <- wrp_dictionary[wrp_dictionary$regional_disaggregate |
wrp_dictionary$disaggregator |
wrp_dictionary$question |
wrp_dictionary$needed, ]
wrp_data = wrp_data[,c(wrp_dictionary$pos)]
wrp_dictionary$pos = match(wrp_dictionary$variable, names(wrp_data))
View(wrp_dictionary)
wrp_year_col <- match("year", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
rp_dictionary$variable
wrp_dictionary$variable
match("wgt", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
wrp_projweight_col <- match("projectionWeight", wrp_dictionary$variable)
match("projectionWeight", wrp_dictionary$variable)
wrp_year_col <- match("year", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
wrp_projweight_col <- match("projectionWeight", wrp_dictionary$variable)
wrp_dictionary$WRP_UID <- NA
regional_ids <- c("country", "region", "income")
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] <- regional_ids
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] <-
paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] <-
paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary <- wrp_dictionary %>%
select(WRP_UID, pos, variable, label, levels)
wrp_regions <- wrp_dictionary[wrp_dictionary$WRP_UID %in% regional_ids, ]
wrp_disaggregations <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 3) ==
"DIS", ]
wrp_questions <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 1) == "Q", ]
wrp_questions$WRP_UID <- toupper(wrp_questions$variable)
usethis::use_data(wrp_data,
wrp_year_col,
wrp_projweight_col,
wrp_weight_col,
wrp_regions,
wrp_disaggregations,
wrp_questions,
overwrite = TRUE,
internal = TRUE,
compress = "xz")
# Set up data frame
wrp_geography_col <- .get_regional_column(geography)
wrp_question_col <- .get_question_column(wrp_question_uid)
wrp_wgt_col <- .get_weight_column(wrp_geography_col)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
# Set up data frame
wrp_geography_col <- .get_regional_column(geography)
wrp_question_col <- .get_question_column(wrp_question_uid)
wrp_wgt_col <- .get_weight_column(wrp_geography_col)
View(wrp_data)
wrp_disaggregations$pos
View(wrp_dictionary)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 12:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label),
"World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary <- wrp_dictionary[wrp_dictionary$regional_disaggregate |
wrp_dictionary$disaggregator |
wrp_dictionary$question |
wrp_dictionary$needed, ]
wrp_data = wrp_data[,c(wrp_dictionary$pos)]
wrp_dictionary$pos = match(wrp_dictionary$variable, names(wrp_data))
wrp_year_col <- match("year", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
wrp_projweight_col <- match("projectionWeight", wrp_dictionary$variable)
wrp_dictionary$WRP_UID <- NA
regional_ids <- c("country", "region", "income")
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] <- regional_ids
regional_ids
wrp_dictionary$regional_disaggregate
View(wrp_dictionary)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 12:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$label),
"World Bank Income Levels", wrp_dictionary$label)
View(wrp_dictionary)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 12:21)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
View(wrp_dictionary)
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$variable == "countryIncomeLevel"),
"World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary$label <- ifelse(is.na(wrp_dictionary$variable == "cprojectionWeight"),
"projectionWeight", wrp_dictionary$label)
View(wrp_dictionary)
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "countryIncomeLevel"),
"World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "cprojectionWeight"),
"projectionWeight", wrp_dictionary$label)
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "projectionWeight"),
"projectionWeight", wrp_dictionary$label)
wrp_dictionary <- wrp_dictionary[wrp_dictionary$regional_disaggregate |
wrp_dictionary$disaggregator |
wrp_dictionary$question |
wrp_dictionary$needed, ]
wrp_data = wrp_data[,c(wrp_dictionary$pos)]
wrp_dictionary$pos = match(wrp_dictionary$variable, names(wrp_data))
wrp_year_col <- match("year", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
wrp_projweight_col <- match("projectionWeight", wrp_dictionary$variable)
wrp_dictionary$WRP_UID <- NA
regional_ids <- c("country", "region", "income")
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] <- regional_ids
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] <-
paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] <-
paste0("Q", 1:sum(wrp_dictionary$question))
View(wrp_dictionary)
wrp_dictionary$WRP_UID[wrp_dictionary$needed] <-
paste0("NEED", 1:sum(wrp_dictionary$needed))
wrp_dictionary <- wrp_dictionary %>%
select(WRP_UID, pos, variable, label, levels)
View(wrp_dictionary)
wrp_regions <- wrp_dictionary[wrp_dictionary$WRP_UID %in% regional_ids, ]
wrp_disaggregations <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 3) ==
"DIS", ]
wrp_questions <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 1) == "Q", ]
wrp_questions$WRP_UID <- toupper(wrp_questions$variable)
wrp_needed = wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 4) == "NEED", ]
View(wrp_needed)
usethis::use_data(wrp_data,
wrp_year_col,
wrp_projweight_col,
wrp_weight_col,
wrp_regions,
wrp_disaggregations,
wrp_questions,
overwrite = TRUE,
internal = TRUE,
compress = "xz")
# Set up data frame
wrp_geography_col <- .get_regional_column(geography)
wrp_question_col <- .get_question_column(wrp_question_uid)
wrp_wgt_col <- .get_weight_column(wrp_geography_col)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
library(labelled)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
library(janitor)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
# Output summary
message(paste("You have selected:", wrp_question_uid))
message("This question asks:")
message(wrp_agg$question[1])
question_summary <- wrp_agg %>%
group_by(.data$year) %>%
summarise(n = length(unique(.data$geography))) %>%
ungroup() %>%
arrange(.data$year)
.print_question_summary(question_summary)
source("~/Documents/github/wrp/R/print_question_summary.R", echo=TRUE)
source("~/Documents/github/wrp/R/print_one_year_summary.R", echo=TRUE)
source("~/Documents/github/wrp/R/print_two_year_summary.R", echo=TRUE)
.print_question_summary(question_summary)
View(wrp_data)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
wrp_data = remove_all_labels(wrp_data)
View(wrp_data)
usethis::use_data(wrp_data,
wrp_year_col,
wrp_projweight_col,
wrp_weight_col,
wrp_regions,
wrp_disaggregations,
wrp_questions,
overwrite = TRUE,
internal = TRUE,
compress = "xz")
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
View(wrp_disaggregations)
wrp_dictionary <- labelled::generate_dictionary(wrp_data)
View(wrp_dictionary)
View(wrp_dictionary)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 13:19)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
View(wrp_dictionary)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
View(wrp_disaggregations)
View(wrp_dictionary)
View(wrp_disaggregations)
View(wrp_dictionary)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
View(wrp_data)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 13:15, 17:19)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
View(wrp_dictionary)
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "countryIncomeLevel"),
"World Bank Income Levels", wrp_dictionary$label)
wrp_dictionary$label <- ifelse((wrp_dictionary$variable == "projectionWeight"),
"projectionWeight", wrp_dictionary$label)
wrp_dictionary <- wrp_dictionary[wrp_dictionary$regional_disaggregate |
wrp_dictionary$disaggregator |
wrp_dictionary$question |
wrp_dictionary$needed, ]
View(wrp_disaggregations)
wrp_data = wrp_data[,c(wrp_dictionary$pos)]
wrp_dictionary$pos = match(wrp_dictionary$variable, names(wrp_data))
wrp_year_col <- match("year", wrp_dictionary$variable)
wrp_weight_col <- match("wgt", wrp_dictionary$variable)
wrp_projweight_col <- match("projectionWeight", wrp_dictionary$variable)
wrp_dictionary$WRP_UID <- NA
regional_ids <- c("country", "region", "income")
wrp_dictionary$WRP_UID[wrp_dictionary$regional_disaggregate] <- regional_ids
wrp_dictionary$WRP_UID[wrp_dictionary$disaggregator] <-
paste0("DIS", 1:sum(wrp_dictionary$disaggregator))
wrp_dictionary$WRP_UID[wrp_dictionary$question] <-
paste0("Q", 1:sum(wrp_dictionary$question))
wrp_dictionary$WRP_UID[wrp_dictionary$needed] <-
paste0("NEED", 1:sum(wrp_dictionary$needed))
wrp_dictionary <- wrp_dictionary %>%
select(WRP_UID, pos, variable, label, levels)
wrp_regions <- wrp_dictionary[wrp_dictionary$WRP_UID %in% regional_ids, ]
wrp_disaggregations <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 3) ==
"DIS", ]
wrp_questions <- wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 1) == "Q", ]
wrp_questions$WRP_UID <- toupper(wrp_questions$variable)
wrp_needed = wrp_dictionary[substr(wrp_dictionary$WRP_UID, 1, 4) == "NEED", ]
wrp_data = remove_all_labels(wrp_data)
View(wrp_disaggregations)
View(wrp_questions)
View(wrp_regions)
wrp_regions = wrp_regions %>% select(-labels)
wrp_regions = wrp_regions %>% select(-label)
wrp_disaggregations = wrp_disaggregations %>% select(-label)
usethis::use_data(wrp_data,
wrp_year_col,
wrp_projweight_col,
wrp_weight_col,
wrp_regions,
wrp_disaggregations,
wrp_questions,
overwrite = TRUE,
internal = TRUE,
compress = "xz")
# Set up data frame
wrp_geography_col <- .get_regional_column(geography)
wrp_question_col <- .get_question_column(wrp_question_uid)
wrp_wgt_col <- .get_weight_column(wrp_geography_col)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
wrp_disaggregations$pos
i = 2
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
View(tmp)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
source("~/Documents/github/wrp/R/wrp_clean.R", echo=TRUE)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate()
df <- df %>% mutate(disaggregation = names(df)[2], question = names(df)[4])
df = tmp
df <- df %>% mutate(disaggregation = names(df)[2], question = names(df)[4])
names(df)[1] <- "geography"
names(df)[4] <- "response"
names(df)[2] <- "group"
df <- df %>%
mutate_if(is.factor, as.character) %>%
clean_names("lower_camel")
df <- df[, c(1, 6, 2, 8, 7, 4, 5)]
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
source("~/Documents/github/wrp/R/wrp_clean.R", echo=TRUE)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
View(wrp_agg)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
# Set up data frame
wrp_geography_col <- .get_regional_column(geography)
wrp_question_col <- .get_question_column(wrp_question_uid)
wrp_wgt_col <- .get_weight_column(wrp_geography_col)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
View(wrp_agg)
View(wrp_agg)
View(wrp_agg)
source("~/Documents/github/wrp/R/wrp_clean.R", echo=TRUE)
# Aggregate data using weights
wrp_agg <- lapply(wrp_disaggregations$pos, function(i) {
tmp <- wrp_data[, c(
wrp_geography_col, i, wrp_year_col, wrp_wgt_col,
wrp_question_col
)]
tmp <- tmp[!is.na(tmp[, 5]), ] %>%
wrp_aggregate() %>%
wrp_clean()
}) %>%
bind_rows()
View(wrp_agg)
roxygen2::roxygenise()
View(wrp_disaggregations)
?gsub
roxygen2::roxygenise()
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 13:15, 17:19)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
View(wrp_disaggregations)
View(wrp_dictionary)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6, 233)) %>%
mutate(disaggregator = pos %in% c(3, 13:15, 17:19)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
View(wrp_dictionary)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
View(wrp_regions)
#wrp_data = remove_all_labels(wrp_data)
wrp_regions = wrp_regions %>% select(-label)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
View(wrp_disaggregations)
View(wrp_disaggregations)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
View(wrp_disaggregations)
wrp_data <- raw %>%
janitor::clean_names("lower_camel") %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp_data$countryIncomeLevel <- as.character(wrp_data$countryIncomeLevel2019)
wrp_data$countryIncomeLevel <- ifelse(is.na(wrp_data$countryIncomeLevel),
as.character(wrp_data$countryIncomeLevel2021), wrp_data$countryIncomeLevel
)
wrp_dictionary <- labelled::generate_dictionary(wrp_data) %>%
mutate(regional_disaggregate = pos %in% c(2, 6)) %>%
mutate(disaggregator = pos %in% c(3, 13:15, 17)) %>%
mutate(question = substr(variable, 1, 1) == "q" |
substr(variable, 1, 2) == "vh") %>%
mutate(needed = variable %in% c("year", "wgt", "projectionWeight"))
View(wrp_dictionary)
source("~/Documents/github/wrp/data-raw/format_wrp_from_raw.R", echo=TRUE)
install.packages('rhub')
hub::check_for_cran()
rhub::check_for_cran()
devtools::spell_check()
devtools::release()
devtools::release()
