library(devtools)
usethis::use_readme_rmd()
library(wrp)
??unnest
roxygen2::roxygenise()
roxygen2::roxygenise()
?usethis::use_data
source("~/github/wrp/data-raw/format_wrp_from_raw.R")
source("~/github/wrp/data-raw/format_wrp_from_raw.R")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
?devtools::document
library(wrp)
wrp_get(geography = "country", question_number = 80)
df <- wrp::wrp
dict <- wrp::wrp_dictionary
View(df)
geography = NULL
question_number = NULL
if(is.null(geography)){
message("Please Select Geography")
geography = dict %>% filter(regional_disaggregate)
tmp = menu(geography$label)
geography = match(geography$variable[tmp], dict$variable)
}else{
geography = case_when(geography == "country" ~ 2,
geography == "region" ~ 7,
geography  == "income" ~ 234)
}
View(dict)
geography = dict %>% filter(regional_disaggregate)
geography = dict %>% dplyr::filter(regional_disaggregate)
wrp::wrp_get(geography = "country", question_number = 80)
source("~/github/wrp/data-raw/format_wrp_from_raw.R")
wrp::wrp_get(geography = "country", question_number = 80)
library(wrp)
wrp_get(geography = "country", question_number = 80)
wrp_get(geography = "country", question_number = 10)
df <- wrp::wrp
geography = NULL
question_number = NULL
if(is.null(geography)){
message("Please Select Geography")
geography = dict %>% filter(regional_disaggregate)
tmp = menu(geography$label)
geography = match(geography$variable[tmp], dict$variable)
}else{
geography = case_when(geography == "country" ~ 2,
geography == "region" ~ 7,
geography  == "income" ~ 234)
}
if(is.null(question_number)){
message("Please Select Survey Question")
question = dict %>% filter(question)
tmp = menu(question$label)
question_number = match(question$variable[tmp], dict$variable)
}
yr = match("year", dict$variable)
wgt = ifelse(geography == 2, match("wgt", dict$variable), match("projectionWeight", dict$variable))
disaggregation = dict %>% filter(disaggregator)
wrp_agg  = df[, c(geography, yr, wgt, question_number)] %>% filter(complete.cases(.)) %>%
mutate(None = "Aggregate") %>% relocate(None, .after = 1) %>%
wrp_aggregate() %>% wrp_clean()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
CheckLazyDataCompression <- function(pkg)
{
pkg_name <- sub("_.*", "", pkg)
lib <- tempfile(); dir.create(lib)
zs <- c("gzip", "bzip2", "xz")
res <- integer(3); names(res) <- zs
for (z in zs) {
opts <- c(paste0("--data-compress=", z),
"--no-libs", "--no-help", "--no-demo", "--no-exec", "--no-test-load")
install.packages(pkg, lib, INSTALL_opts = opts, repos = NULL, quiet = TRUE)
res[z] <- file.size(file.path(lib, pkg_name, "data", "Rdata.rdb"))
}
ceiling(res/1024)
}
CheckLazyDataCompression(wrp)
source("~/github/wrp/data-raw/format_wrp_from_raw.R")
usethis::use_data(wrp, overwrite = TRUE, compress = "gzip")
usethis::use_data(wrp, overwrite = TRUE, compress = "xz")
?menu
?complete.cases
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
geography = NULL
question_number = NULL
df <- wrp::wrp
dict <- wrp::wrp_dictionary
if(is.null(geography)){
message("Please Select Geography")
geography = dict %>% filter(.data$regional_disaggregate)
tmp = menu(geography$label)
geography = match(geography$variable[tmp], dict$variable)
}else{
geography = case_when(geography == "country" ~ 2,
geography == "region" ~ 7,
geography  == "income" ~ 234)
}
if(is.null(question_number)){
message("Please Select Survey Question")
question = dict %>% filter(question)
tmp = menu(question$label)
question_number = match(question$variable[tmp], dict$variable)
}
yr = match("year", dict$variable)
wgt = ifelse(geography == 2, match("wgt", dict$variable), match("projectionWeight", dict$variable))
disaggregation = dict %>% filter(!.data$disaggregator)
wrp_agg  = df[, c(geography, yr, wgt, question_number)] %>% filter(complete.cases(.data)) %>%
mutate(None = "Aggregate") %>% relocate(.data$None, .after = 1) %>%
wrp_aggregate() %>% wrp_clean()
wrp_agg  = df[, c(geography, yr, wgt, question_number)] %>% filter(complete.cases(.)) %>%
mutate(None = "Aggregate") %>% relocate(.data$None, .after = 1) %>%
wrp_aggregate() %>% wrp_clean()
wrp_agg  = df[, c(geography, yr, wgt, question_number)] %>% filter(complete.cases(.)) %>%
mutate(None = "Aggregate") %>% relocate(None, .after = 1) %>%
wrp_aggregate() %>% wrp_clean()
wrp_dis = lapply(disaggregation$pos, function(i){
tmp = df[, c(geography, i, yr, wgt, question_number)] %>% filter(complete.cases(.))
tmp = tmp %>% wrp_aggregate() %>% wrp_clean()})
match("projectionWeight", names(df))
wrp_agg  = df[, c(geography, yr, wgt, question_number)] %>% filter(complete.cases(.)) %>%
mutate(None = "Aggregate") %>% relocate(None, .after = 1) %>%
wrp_aggregate() %>% wrp_clean()
disaggregation$pos
View(disaggregation)
wrp <- raw %>%
janitor::clean_names("lower_camel") %>%
mutate(iso3C = countrycode::countrycode(country, "country.name", "iso3c", custom_match = c("Kosovo" = "KSV"))) %>%
relocate(iso3C, .after = country) %>%
# change 1: convert haven_labelled variables to factors ----
mutate_if(haven::is.labelled, haven::as_factor)
wrp$countryIncomeLevel = as.character(wrp$countryIncomeLevel2019)
wrp$countryIncomeLevel = ifelse(is.na(wrp$countryIncomeLevel),
as.character(wrp$countryIncomeLevel2021), wrp$countryIncomeLevel)
wrp_dictionary = labelled::generate_dictionary(wrp) %>%
mutate(regional_disaggregate = pos %in% c(2,7,234)) %>%
mutate(disaggregator = pos %in% c(14:21)) %>%
mutate(question = substr(variable, 1,1) == "q" | substr(variable, 1,2) == "vh")
wrp_dictionary$label = ifelse(is.na(wrp_dictionary$label), "World Bank Income Levels", wrp_dictionary$label)
View(wrp_dictionary)
View(dict)
disaggregation = dict %>% filter(!.data$disaggregator)
disaggregation = dict %>% filter(disaggregator)
globalVariables(".")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
utils::globalVariables()
roxygen2::roxygenise()
roxygen2::roxygenise()
con = RSQLite::dbConnect(RSQLite::SQLite(),newdb)
newdb = "C:/Users/DavidHammond/OneDrive - Institute for Economics and Peace/Institute for Economics and Peace/Research/Data/IEP-DATABASE-SEPT-2022"
con = RSQLite::dbConnect(RSQLite::SQLite(),newdb)
